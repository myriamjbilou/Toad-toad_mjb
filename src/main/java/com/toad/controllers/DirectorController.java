package com.toad.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.toad.entities.Director;
import com.toad.repositories.DirectorRepository;

@Controller
@RequestMapping(path = "/toad/director")
public class DirectorController {
  @Autowired // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  private DirectorRepository directorRepository;

  @PostMapping(path = "/create")
public @ResponseBody String createDirector(
        @RequestParam Integer director_id,
        @RequestParam String nom,
        @RequestParam String prenom,
        @RequestParam String date_naissance,
        @RequestParam String nationnalite) {
 
    Director newDirector = new Director();
    newDirector.setdirector_id(director_id);
    newDirector.setnom(nom);
    newDirector.setprenom(prenom);
    newDirector.setdate_naissance(date_naissance);
    newDirector.setnationnalite(nationnalite);
 
    directorRepository.save(newDirector);
 
    return "Réalisateur enregistré avec succès !";
}

  @GetMapping(path = "/getById")
  public @ResponseBody Director getFilmById(@RequestParam Integer id) {
    return directorRepository.findById(id).orElse(null);
  }

  @GetMapping(path = "/all")
  public @ResponseBody Iterable<Director> getAllDirectors() {
    // This returns a JSON or XML with the users
    return directorRepository.findAll();
  }

  @PutMapping(path = "/update/{id}")
  public @ResponseBody String updateFilm(
      @PathVariable Integer id,
      @RequestParam String nom,
      @RequestParam String prenom, @RequestParam java.sql.Timestamp date_naissance, @RequestParam String nationalite) {
    String status = null;
    Director director = directorRepository.findById(id).orElse(null);
    if (director == null) {
      status = "Film non trouvé";
    }
    else {
      Director n = new Director();
      n.setnom(nom);
      n.setprenom(prenom);
      n.setdate_naissance(nationalite);
      n.setnationnalite(nationalite);
      directorRepository.save(n);
      status = "Film Mis à jour";
    }
    return status;

  }

  @DeleteMapping(path = "/delete/{id}")
  public @ResponseBody String deleteFilm(@PathVariable Integer id) {
    String status = null;
    if (directorRepository.existsById(id)) {
      directorRepository.deleteById(id);
      status = "Réalisateur supprimé";
    } else {
      status = "Réalisateur pas trouvé";
    }
    return status;
  }
}